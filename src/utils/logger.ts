/**
 * Sistema de logs seguro para a aplica√ß√£o
 * Remove logs sens√≠veis em produ√ß√£o e permite debug em desenvolvimento
 */

class Logger {
  private isDevelopment = process.env.NODE_ENV === 'development';
  private logsEnabled = process.env.NEXT_PUBLIC_ENABLE_LOGS === 'true';

  /**
   * Log de desenvolvimento - s√≥ mostra em desenvolvimento e se habilitado
   * Use para dados que podem conter informa√ß√µes sens√≠veis
   */
  dev(message: string, data?: any) {
    if (this.isDevelopment && this.logsEnabled) {
      console.log(`üîß [DEV] ${message}`, data);
    }
  }

  /**
   * Log de informa√ß√£o - sempre vis√≠vel mas sem dados sens√≠veis
   * Use para informa√ß√µes gerais do fluxo da aplica√ß√£o
   */
  info(message: string) {
    console.log(`‚ÑπÔ∏è [INFO] ${message}`);
  }

  /**
   * Log de sucesso - sempre vis√≠vel mas sem dados sens√≠veis
   * Use para confirmar opera√ß√µes bem-sucedidas
   */
  success(message: string) {
    console.log(`‚úÖ [SUCCESS] ${message}`);
  }

  /**
   * Log de aviso - sempre vis√≠vel
   * Use para situa√ß√µes que requerem aten√ß√£o
   */
  warn(message: string) {
    console.warn(`‚ö†Ô∏è [WARN] ${message}`);
  }

  /**
   * Log de erro - sempre vis√≠vel mas sem dados sens√≠veis
   * Use para erros e exce√ß√µes
   */
  error(message: string, error?: Error | any) {
    const errorMessage = error?.message || error || 'Erro desconhecido';
    console.error(`‚ùå [ERROR] ${message}`, errorMessage);
  }

  /**
   * Log de autentica√ß√£o - seguro para produ√ß√£o
   * Remove dados sens√≠veis mas mant√©m informa√ß√µes √∫teis
   */
  auth(action: string, details?: { email?: string; unidade?: string }) {
    if (this.isDevelopment && this.logsEnabled) {
      console.log(`üîê [AUTH] ${action}`, details);
    } else {
      // Em produ√ß√£o, s√≥ mostra a a√ß√£o sem dados sens√≠veis
      console.log(`üîê [AUTH] ${action}`);
    }
  }

  /**
   * Log de API - seguro para produ√ß√£o
   * Remove dados sens√≠veis das requisi√ß√µes
   */
  api(method: string, endpoint: string, success: boolean = true) {
    const status = success ? '‚úÖ' : '‚ùå';
    console.log(`üåê [API] ${status} ${method.toUpperCase()} ${endpoint}`);
  }
}

export const logger = new Logger();

// Exportar tipos para TypeScript
export type LogLevel = 'dev' | 'info' | 'success' | 'warn' | 'error' | 'auth' | 'api';
